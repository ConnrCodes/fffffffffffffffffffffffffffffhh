import React, { useState, useEffect } from 'react';
import { DollarSign, PieChart, Plus, Trash2, Download } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

interface Expense {
  id: string;
  description: string;
  amount: number;
  category: string;
  date: string;
}

const ExpenseTracker = () => {
  const [expenses, setExpenses] = useState<Expense[]>(() => {
    const saved = localStorage.getItem('expenses');
    return saved ? JSON.parse(saved) : [];
  });
  const [description, setDescription] = useState('');
  const [amount, setAmount] = useState('');
  const [category, setCategory] = useState('general');
  const [isExporting, setIsExporting] = useState(false);

  useEffect(() => {
    localStorage.setItem('expenses', JSON.stringify(expenses));
  }, [expenses]);

  const categories = [
    'general',
    'food',
    'transport',
    'utilities',
    'entertainment',
    'shopping',
    'kids'
  ];

  const addExpense = () => {
    if (!description.trim() || !amount.trim()) return;

    const newExpense: Expense = {
      id: Date.now().toString(),
      description: description.trim(),
      amount: parseFloat(amount),
      category,
      date: new Date().toISOString(),
    };

    setExpenses([newExpense, ...expenses]);
    setDescription('');
    setAmount('');
    setCategory('general');
  };

  const deleteExpense = (id: string) => {
    setExpenses(expenses.filter(expense => expense.id !== id));
  };

  const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0);

  const categoryTotals = expenses.reduce((acc, expense) => {
    acc[expense.category] = (acc[expense.category] || 0) + expense.amount;
    return acc;
  }, {} as Record<string, number>);

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const exportToSpreadsheet = async () => {
    setIsExporting(true);
    try {
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      const lines = [
        ['Expense Report', '', '', ''],
        ['Generated on:', currentDate, '', ''],
        ['', '', '', ''],
        ['Detailed Expenses', '', '', ''],
        ['Date', 'Description', 'Category', 'Amount ($)']
      ];

      const sortedExpenses = [...expenses].sort((a, b) => 
        new Date(b.date).getTime() - new Date(a.date).getTime()
      );

      sortedExpenses.forEach(expense => {
        lines.push([
          formatDate(expense.date),
          expense.description,
          expense.category.charAt(0).toUpperCase() + expense.category.slice(1),
          expense.amount.toFixed(2)
        ]);
      });

      lines.push(
        ['', '', '', ''],
        ['Summary', '', '', ''],
        ['Total Expenses:', '', '', totalExpenses.toFixed(2)],
        ['', '', '', ''],
        ['Category Breakdown', '', '', ''],
        ['Category', '', 'Amount ($)', 'Percentage']
      );

      Object.entries(categoryTotals)
        .sort(([, a], [, b]) => b - a)
        .forEach(([category, total]) => {
          const percentage = ((total / totalExpenses) * 100).toFixed(1);
          lines.push([
            category.charAt(0).toUpperCase() + category.slice(1),
            '',
            total.toFixed(2),
            `${percentage}%`
          ]);
        });

      lines.push(
        ['', '', '', ''],
        ['', '', '', ''],
        ['Generated by Fletcher AI Assistant', '', '', ''],
        ['Report generated on ' + currentDate, '', '', '']
      );

      const csvContent = lines
        .map(row => row.map(cell => `"${cell}"`).join(','))
        .join('\n');

      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate processing
      
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `Expense_Report_${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } finally {
      setIsExporting(false);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 25,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: {
      opacity: 1,
      x: 0,
      transition: {
        type: "spring",
        stiffness: 500,
        damping: 30
      }
    }
  };

  return (
    <motion.div
      className="bg-black/80 rounded-lg p-6 backdrop-blur-sm border border-green-500/30 relative overflow-hidden"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent"
        animate={{
          opacity: [0.3, 0.5, 0.3],
          scale: [1, 1.05, 1],
        }}
        transition={{
          duration: 4,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />

      <motion.div
        className="flex items-center justify-between mb-6 relative z-10"
        variants={itemVariants}
      >
        <div className="flex items-center gap-2">
          <motion.div
            whileHover={{ scale: 1.2, rotate: 360 }}
            transition={{ type: "spring", stiffness: 500, damping: 15 }}
          >
            <DollarSign className="w-6 h-6 text-green-400" />
          </motion.div>
          <h2 className="text-green-400 text-lg font-semibold">Expense Tracker</h2>
        </div>

        <div className="flex items-center gap-4">
          <motion.div
            className="text-green-400"
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ type: "spring", stiffness: 500, damping: 25 }}
          >
            Total: ${totalExpenses.toFixed(2)}
          </motion.div>
          
          <motion.button
            onClick={exportToSpreadsheet}
            disabled={isExporting || expenses.length === 0}
            className="flex items-center gap-2 px-3 py-1 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors disabled:opacity-50"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <motion.div
              animate={isExporting ? { rotate: 360 } : {}}
              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
            >
              <Download className="w-4 h-4" />
            </motion.div>
            {isExporting ? 'Exporting...' : 'Export'}
          </motion.button>
        </div>
      </motion.div>

      <motion.div className="space-y-4 relative z-10" variants={containerVariants}>
        <motion.div className="grid grid-cols-3 gap-2" variants={itemVariants}>
          <motion.input
            type="text"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Description"
            className="bg-green-900/20 border border-green-500/30 rounded-lg px-3 py-2 text-green-100 placeholder-green-400/50"
            whileFocus={{ scale: 1.02 }}
            transition={{ type: "spring", stiffness: 500, damping: 30 }}
          />
          <motion.input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            placeholder="Amount"
            min="0"
            step="0.01"
            className="bg-green-900/20 border border-green-500/30 rounded-lg px-3 py-2 text-green-100 placeholder-green-400/50"
            whileFocus={{ scale: 1.02 }}
            transition={{ type: "spring", stiffness: 500, damping: 30 }}
          />
          <motion.select
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="bg-green-900/20 border border-green-500/30 rounded-lg px-3 py-2 text-green-100"
            whileFocus={{ scale: 1.02 }}
            transition={{ type: "spring", stiffness: 500, damping: 30 }}
          >
            {categories.map(cat => (
              <option key={cat} value={cat}>
                {cat.charAt(0).toUpperCase() + cat.slice(1)}
              </option>
            ))}
          </motion.select>
        </motion.div>

        <motion.button
          onClick={addExpense}
          disabled={!description || !amount}
          className="w-full flex items-center justify-center gap-2 bg-green-500 text-white rounded-lg py-2 disabled:opacity-50"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <Plus className="w-4 h-4" />
          Add Expense
        </motion.button>

        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2 max-h-48 overflow-y-auto">
            <AnimatePresence mode="popLayout">
              {expenses.map(expense => (
                <motion.div
                  key={expense.id}
                  layout
                  initial={{ opacity: 0, x: -50 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 50 }}
                  className="flex items-center justify-between bg-green-900/20 rounded-lg p-2"
                  whileHover={{ scale: 1.02 }}
                >
                  <div>
                    <motion.div className="text-green-100">{expense.description}</motion.div>
                    <motion.div className="text-green-400 text-sm">
                      ${expense.amount.toFixed(2)} - {expense.category}
                    </motion.div>
                  </div>
                  <motion.button
                    onClick={() => deleteExpense(expense.id)}
                    className="p-1 text-red-400 hover:text-red-300"
                    whileHover={{ scale: 1.2, rotate: 180 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <Trash2 className="w-4 h-4" />
                  </motion.button>
                </motion.div>
              ))}
            </AnimatePresence>
          </div>

          <motion.div
            className="bg-green-900/20 rounded-lg p-4"
            variants={itemVariants}
          >
            <motion.div
              className="flex items-center gap-2 mb-2"
              whileHover={{ x: 10 }}
            >
              <PieChart className="w-4 h-4 text-green-400" />
              <h3 className="text-green-400">Category Breakdown</h3>
            </motion.div>
            <AnimatePresence mode="popLayout">
              {Object.entries(categoryTotals).map(([category, total], index) => (
                <motion.div
                  key={category}
                  className="flex justify-between text-sm"
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                  transition={{ delay: index * 0.1 }}
                  whileHover={{ x: 5 }}
                >
                  <span className="text-green-100">
                    {category.charAt(0).toUpperCase() + category.slice(1)}
                  </span>
                  <motion.span
                    className="text-green-400"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ type: "spring", stiffness: 500, damping: 25 }}
                  >
                    ${total.toFixed(2)}
                  </motion.span>
                </motion.div>
              ))}
            </AnimatePresence>
          </motion.div>
        </div>
      </motion.div>

      <motion.div
        className="absolute -bottom-32 -right-32 w-64 h-64 bg-green-500/10 rounded-full blur-3xl"
        animate={{
          scale: [1, 1.2, 1],
          opacity: [0.3, 0.5, 0.3],
        }}
        transition={{
          duration: 4,
          repeat: Infinity,
          ease: "easeInOut",
        }}
      />
    </motion.div>
  );
};

export default ExpenseTracker;